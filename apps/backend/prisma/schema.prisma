// Endereço: apps/backend/prisma/schema.prisma (versão com campos de telefone)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DOCTOR
  PATIENT
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

model Address {
  id           String @id @default(cuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String

  doctorProfiles  DoctorProfile[]
  patientProfiles PatientProfile[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?  @unique 
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  doctorProfile  DoctorProfile?
  patientProfile PatientProfile?

  issuedCertificates   MedicalCertificate[] @relation("DoctorCertificates")
  receivedCertificates MedicalCertificate[] @relation("PatientCertificates")
}

model DoctorProfile {
  id        String  @id @default(cuid())
  name      String
  crm       String  @unique
  specialty String?
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @unique
  phone     String?  // Telefone de contato profissional/clínica
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model PatientProfile {
  id          String   @id @default(cuid())
  name        String
  cpf         String   @unique
  dateOfBirth DateTime
  sex         Sex?
  // ===============================================
  // CAMPO DE TELEFONE ADICIONADO AO PACIENTE
  // ===============================================
  phone       String? // Telefone de contato do paciente

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @unique
}

model MedicalCertificate {
  id               String   @id @default(cuid())
  issueDate        DateTime @default(now())
  templateId String  @default("default")
  purpose          String
  startDate        DateTime?
  durationInDays   Int?
  cidCode          String?
  cidDescription   String?
  observations     String?
  pdfUrl           String?

  doctor    User   @relation("DoctorCertificates", fields: [doctorId], references: [id])
  doctorId  String

  patient   User   @relation("PatientCertificates", fields: [patientId], references: [id])
  patientId String
}

model CidCode {
  id          String @id @default(cuid())
  code        String @unique
  description String

  @@index([code])
}